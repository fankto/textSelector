# AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest package="com.example.textselector"
    xmlns:android="http://schemas.android.com/apk/res/android">

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:theme="@style/Theme.TextSelector">
        <activity
            android:name=".ui.MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
            <!-- For SEND intents -->
            <intent-filter>
                <action android:name="android.intent.action.SEND"/>
                <category android:name="android.intent.category.DEFAULT"/>
                <data android:mimeType="text/plain"/>
            </intent-filter>
        </activity>
    </application>

</manifest>




# java/com/example/textselector/ui/SavedSelectionsAdapter.kt
package com.example.textselector.ui

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import com.example.textselector.R
import com.example.textselector.data.SavedSelection
import com.google.android.material.button.MaterialButton
import java.text.SimpleDateFormat
import java.util.*

class SavedSelectionsAdapter(
    private var selections: List<SavedSelection>,
    private val onItemClick: (SavedSelection) -> Unit,
    private val onDeleteClick: (SavedSelection) -> Unit,
    private val onEditClick: (SavedSelection) -> Unit
) : RecyclerView.Adapter<SavedSelectionsAdapter.ViewHolder>() {

    private val dateFormat = SimpleDateFormat("MMM d, yyyy HH:mm", Locale.getDefault())

    inner class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val titleText: TextView = view.findViewById(R.id.selectionTitle)
        val timestampText: TextView = view.findViewById(R.id.timestamp)
        val previewText: TextView = view.findViewById(R.id.previewText)
        val deleteButton: MaterialButton = view.findViewById(R.id.deleteButton)
        val editButton: MaterialButton = view.findViewById(R.id.editButton)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder =
        ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_saved_selection, parent, false))

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val selection = selections[position]
        holder.titleText.text = selection.name
        holder.timestampText.text = dateFormat.format(Date(selection.timestamp))
        holder.previewText.text = selection.getPreviewText()
        holder.itemView.setOnClickListener { onItemClick(selection) }
        holder.deleteButton.setOnClickListener { onDeleteClick(selection) }
        holder.editButton.setOnClickListener { onEditClick(selection) }
    }

    override fun getItemCount(): Int = selections.size

    fun updateSelections(newSelections: List<SavedSelection>) {
        selections = newSelections.sortedByDescending { it.timestamp }
        notifyDataSetChanged()
    }
}




# java/com/example/textselector/ui/PinnedEditText.kt
package com.example.textselector.ui

import android.content.Context
import android.graphics.Rect
import android.os.Parcel
import android.os.Parcelable
import android.text.Editable
import android.text.Spannable
import android.text.style.BackgroundColorSpan
import android.util.AttributeSet
import android.view.GestureDetector
import android.view.MotionEvent
import androidx.appcompat.widget.AppCompatEditText
import androidx.core.content.ContextCompat
import com.example.textselector.R
import kotlin.math.abs
import kotlin.math.max
import kotlin.math.min

class PinnedEditText @JvmOverloads constructor(
    context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = android.R.attr.editTextStyle
) : AppCompatEditText(context, attrs, defStyleAttr) {

    private var pinnedStart: Int? = null
    private var pinnedEnd: Int? = null

    private var tapCount = 0
    private var lastTapTime = 0L
    private val tripleTapThreshold = 500L

    private var searchResults: List<IntRange> = emptyList()
    private var currentSearchIndex = 0

    private var ignoreBringPointIntoView = false

    var onPinChanged: (() -> Unit)? = null
    var onSearchCleared: (() -> Unit)? = null
    var selectionChangeListener: ((Int, Int) -> Unit)? = null

    init {
        if (text !is Editable) setText(text?.toString() ?: "")
        isLongClickable = false
    }

    override fun bringPointIntoView(offset: Int): Boolean {
        if (ignoreBringPointIntoView) return false
        val layout = layout ?: return false
        val line = layout.getLineForOffset(offset)
        val rect = Rect()
        layout.getLineBounds(line, rect)
        rect.offset(totalPaddingLeft, totalPaddingTop)
        return requestRectangleOnScreen(rect, true)
    }

    fun centerOffsetInView(offset: Int) {
        val layout = layout ?: return
        val line = layout.getLineForOffset(offset)
        val lineTop = layout.getLineTop(line)
        val lineBottom = layout.getLineBottom(line)
        val lineCenter = (lineTop + lineBottom) / 2

        val viewHeight = height
        val desiredScrollY = lineCenter - viewHeight / 2

        scrollTo(scrollX, desiredScrollY.coerceAtLeast(0))
    }

    private val gestureDetector =
        GestureDetector(context, object : GestureDetector.SimpleOnGestureListener() {
            override fun onDoubleTap(e: MotionEvent): Boolean {
                val offset = getOffsetForPosition(e.x, e.y)
                handleDoubleTap(offset)
                return true
            }
        })

    override fun onTouchEvent(event: MotionEvent): Boolean {
        if (event.action == MotionEvent.ACTION_DOWN) {
            val currentTime = System.currentTimeMillis()
            if (currentTime - lastTapTime < tripleTapThreshold) {
                tapCount++
            } else {
                tapCount = 1
            }
            lastTapTime = currentTime

            if (tapCount == 3) {
                clearSelectionPins()
                tapCount = 0
                return true
            }
        }
        gestureDetector.onTouchEvent(event)
        return super.onTouchEvent(event)
    }

    private fun handleDoubleTap(offset: Int) {
        val (wordStart, wordEnd) = getWordBoundaries(offset)
        if (pinnedStart == null || pinnedEnd == null) {
            pinnedStart = wordStart
            pinnedEnd = wordEnd
        } else {
            if (wordEnd <= pinnedStart!!) {
                pinnedStart = wordStart
            } else if (wordStart >= pinnedEnd!!) {
                pinnedEnd = wordEnd
            } else {
                val diffStart = abs(wordStart - pinnedStart!!)
                val diffEnd = abs(wordEnd - pinnedEnd!!)
                if (diffStart < diffEnd) pinnedStart = wordStart else pinnedEnd = wordEnd
            }
        }
        val start = min(pinnedStart!!, pinnedEnd!!)
        val end = max(pinnedStart!!, pinnedEnd!!)

        // Disable auto-scroll
        ignoreBringPointIntoView = true
        setSelection(start, end)
        postDelayed({ ignoreBringPointIntoView = false }, 50)

        onPinChanged?.invoke()
    }

    private fun getWordBoundaries(offset: Int): Pair<Int, Int> {
        val content = text?.toString() ?: ""
        if (content.isEmpty()) return 0 to 0
        var start = offset
        var end = offset
        while (start > 0 && !content[start - 1].isWhitespace()) start--
        while (end < content.length && !content[end].isWhitespace()) end++
        return start to end
    }

    fun clearSelectionPins() {
        pinnedStart = null
        pinnedEnd = null
        setSelection(selectionStart, selectionStart)
        onPinChanged?.invoke()
    }

    fun updateSearch(query: String) {
        val editable = text ?: return
        clearSearchHighlights(invokeCallback = false)
        if (query.isEmpty()) return

        val highlightColor = ContextCompat.getColor(context, R.color.searchHighlight)
        val regex = Regex(Regex.escape(query), RegexOption.IGNORE_CASE)
        val matches = regex.findAll(editable.toString()).toList()
        matches.forEach { match ->
            editable.setSpan(
                BackgroundColorSpan(highlightColor),
                match.range.first,
                match.range.last + 1,
                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE
            )
        }
        searchResults = matches.map { it.range }
        if (searchResults.isNotEmpty()) {
            currentSearchIndex = 0
            val range = searchResults[0]
            setSelection(range.first, range.last + 1)
        }
    }

    fun clearSearchHighlights(invokeCallback: Boolean = true) {
        val editable = text ?: return
        val highlightColor = ContextCompat.getColor(context, R.color.searchHighlight)
        editable.getSpans(0, editable.length, BackgroundColorSpan::class.java)
            .filter { it.backgroundColor == highlightColor }
            .forEach { editable.removeSpan(it) }
        searchResults = emptyList()
        if (invokeCallback) onSearchCleared?.invoke()
    }

    fun nextSearchResult() {
        if (searchResults.isNotEmpty()) {
            currentSearchIndex = (currentSearchIndex + 1) % searchResults.size
            val range = searchResults[currentSearchIndex]
            setSelection(range.first, range.last + 1)
        }
    }

    fun previousSearchResult() {
        if (searchResults.isNotEmpty()) {
            currentSearchIndex = if (currentSearchIndex - 1 < 0) searchResults.size - 1 else currentSearchIndex - 1
            val range = searchResults[currentSearchIndex]
            setSelection(range.first, range.last + 1)
        }
    }

    override fun onSelectionChanged(selStart: Int, selEnd: Int) {
        super.onSelectionChanged(selStart, selEnd)
        selectionChangeListener?.invoke(selStart, selEnd)
    }

    override fun onSaveInstanceState(): Parcelable? {
        val superState = super.onSaveInstanceState()
        return SavedState(superState).apply {
            pinnedStart = this@PinnedEditText.pinnedStart ?: -1
            pinnedEnd = this@PinnedEditText.pinnedEnd ?: -1
        }
    }

    override fun onRestoreInstanceState(state: Parcelable?) {
        if (state !is SavedState) {
            super.onRestoreInstanceState(state)
            return
        }
        super.onRestoreInstanceState(state.superState)
        pinnedStart = if (state.pinnedStart != -1) state.pinnedStart else null
        pinnedEnd = if (state.pinnedEnd != -1) state.pinnedEnd else null
        if (pinnedStart != null && pinnedEnd != null) {
            setSelection(min(pinnedStart!!, pinnedEnd!!), max(pinnedStart!!, pinnedEnd!!))
        }
    }

    internal class SavedState : BaseSavedState {
        var pinnedStart: Int = -1
        var pinnedEnd: Int = -1

        constructor(superState: Parcelable?) : super(superState)
        private constructor(parcel: Parcel) : super(parcel) {
            pinnedStart = parcel.readInt()
            pinnedEnd = parcel.readInt()
        }

        override fun writeToParcel(out: Parcel, flags: Int) {
            super.writeToParcel(out, flags)
            out.writeInt(pinnedStart)
            out.writeInt(pinnedEnd)
        }

        companion object CREATOR : Parcelable.Creator<SavedState> {
            override fun createFromParcel(parcel: Parcel): SavedState = SavedState(parcel)
            override fun newArray(size: Int): Array<SavedState?> = arrayOfNulls(size)
        }
    }

    // Expose search result data for external use.
    val getSearchResultsCount: () -> Int = { searchResults.size }
    val getCurrentSearchIndex: () -> Int = { currentSearchIndex + 1 }
}




# java/com/example/textselector/ui/viewmodel/MainViewModelFactory.kt
package com.example.textselector.ui.viewmodel

import android.content.Context
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelProvider
import com.example.textselector.data.TextSelectorDatabase
import com.example.textselector.data.TextSelectorRepository

class MainViewModelFactory(context: Context) : ViewModelProvider.Factory {
    private val repository = TextSelectorRepository(
        TextSelectorDatabase.getInstance(context).savedSelectionDao()
    )

    @Suppress("UNCHECKED_CAST")
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(MainViewModel::class.java)) {
            return MainViewModel(repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}




# java/com/example/textselector/ui/viewmodel/MainViewModel.kt
package com.example.textselector.ui.viewmodel

import androidx.lifecycle.*
import com.example.textselector.data.SavedSelection
import com.example.textselector.data.TextSelectorRepository
import kotlinx.coroutines.launch

class MainViewModel(private val repository: TextSelectorRepository) : ViewModel() {

    private val _savedSelections = MutableLiveData<List<SavedSelection>>()
    val savedSelections: LiveData<List<SavedSelection>> get() = _savedSelections

    init {
        loadSelections()
    }

    fun loadSelections() {
        viewModelScope.launch {
            _savedSelections.value = repository.getAllSelections()
        }
    }

    fun saveSelection(selection: SavedSelection) {
        viewModelScope.launch {
            repository.insertSelection(selection)
            loadSelections()
        }
    }

    fun updateSelection(selection: SavedSelection) {
        viewModelScope.launch {
            repository.updateSelection(selection)
            loadSelections()
        }
    }

    fun deleteSelection(selection: SavedSelection) {
        viewModelScope.launch {
            repository.deleteSelection(selection)
            loadSelections()
        }
    }
}




# java/com/example/textselector/ui/MainActivity.kt
package com.example.textselector.ui

import android.content.Context
import android.content.DialogInterface
import android.os.Bundle
import android.text.Html
import android.text.method.LinkMovementMethod
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.inputmethod.EditorInfo
import android.widget.ImageButton
import android.widget.TextView
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.appcompat.widget.SearchView
import androidx.core.view.ViewCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.Observer
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.textselector.R
import com.example.textselector.data.SavedSelection
import com.example.textselector.databinding.ActivityMainBinding
import com.example.textselector.ui.viewmodel.MainViewModel
import com.example.textselector.ui.viewmodel.MainViewModelFactory
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import com.google.android.material.snackbar.Snackbar
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.flow.collectLatest
import kotlinx.coroutines.flow.debounce
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val viewModel: MainViewModel by viewModels { MainViewModelFactory(this) }
    private var searchView: SearchView? = null
    private var searchMenuItem: MenuItem? = null
    private var wasSearchExpanded = false
    private var savedSearchQuery: String? = null

    fun SearchView.queryTextChanges(): Flow<String> = callbackFlow {
        val listener = object : SearchView.OnQueryTextListener {
            override fun onQueryTextSubmit(query: String?) = true
            override fun onQueryTextChange(newText: String?) : Boolean {
                trySend(newText.orEmpty())
                return true
            }
        }
        setOnQueryTextListener(listener)
        awaitClose { setOnQueryTextListener(null) }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        val prefs = getSharedPreferences("TextSelectorPrefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("isDarkMode", false)
        AppCompatDelegate.setDefaultNightMode(
            if (isDarkMode) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
        )

        super.onCreate(savedInstanceState)
        WindowCompat.setDecorFitsSystemWindows(window, false)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.pinnedEditText.showSoftInputOnFocus = false

        savedInstanceState?.let {
            wasSearchExpanded = it.getBoolean("wasSearchExpanded", false)
            savedSearchQuery = it.getString("savedSearchQuery")
        }

        setupToolbar()
        setupTextArea()
        setupSaveButton()
        setupSearchNavigation()
        observeViewModel()

        // Handle SEND intent
        if (intent?.action == "android.intent.action.SEND" && intent.type == "text/plain") {
            intent.getStringExtra("android.intent.extra.TEXT")?.let {
                binding.pinnedEditText.setText(it)
            }
        }

        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { view, insets ->
            val imeInsets = insets.getInsets(WindowInsetsCompat.Type.ime())
            val navInsets = insets.getInsets(WindowInsetsCompat.Type.navigationBars())
            view.setPadding(navInsets.left, view.paddingTop, navInsets.right, navInsets.bottom)
            // Use safe call in case saveFab is missing in some layouts
            binding.saveFab?.translationY = -imeInsets.bottom.toFloat()
            binding.searchNavigation.translationY = -imeInsets.bottom.toFloat()
            insets
        }

        binding.pinnedEditText.selectionChangeListener = { start, end ->
            binding.saveFab?.visibility = if (end - start > 0) View.VISIBLE else View.GONE
        }
        binding.pinnedEditText.onPinChanged = { updatePinBanner() }
        binding.pinnedEditText.onSearchCleared = { updateSearchNavigation(clear = true) }

        binding.pinnedEditText.setOnEditorActionListener { _, actionId, _ ->
            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                binding.pinnedEditText.nextSearchResult()
                binding.nestedScrollView?.post {
                    centerSearchResult()
                } ?: binding.pinnedEditText.post {
                    binding.pinnedEditText.centerOffsetInView(binding.pinnedEditText.selectionStart)
                }
                updateSearchNavigation()
                true
            } else false
        }
    }

    private fun observeViewModel() {
        viewModel.savedSelections.observe(this, Observer {
            // Update UI if needed.
        })
    }

    private fun centerSearchResult() {
        val scrollView = binding.nestedScrollView ?: return
        val editText = binding.pinnedEditText
        val layout = editText.layout ?: return

        val offset = editText.selectionStart
        val line = layout.getLineForOffset(offset)
        // Get the vertical center of the found line
        val lineCenter = (layout.getLineTop(line) + layout.getLineBottom(line)) / 2

        val editTextTop = editText.top
        // Instead of scrollView.height/2, use 40% of scrollView height (adjust as needed)
        val targetScrollY = editTextTop + lineCenter - (scrollView.height * 0.4).toInt()

        scrollView.smoothScrollTo(0, targetScrollY.coerceAtLeast(0))
    }

    override fun onSaveInstanceState(outState: Bundle) {
        outState.putBoolean("wasSearchExpanded", searchMenuItem?.isActionViewExpanded ?: false)
        outState.putString("savedSearchQuery", searchView?.query?.toString())
        super.onSaveInstanceState(outState)
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        searchMenuItem = menu.findItem(R.id.action_search)
        searchView = searchMenuItem?.actionView as? SearchView
        searchView?.let { sv ->
            sv.queryHint = getString(R.string.search_term)
            lifecycleScope.launch {
                sv.queryTextChanges()
                    .debounce(300)
                    .collectLatest { query ->
                        binding.pinnedEditText.updateSearch(query)
                        updateSearchNavigation()
                        binding.nestedScrollView?.post {
                            centerSearchResult()
                        } ?: binding.pinnedEditText.post {
                            binding.pinnedEditText.centerOffsetInView(binding.pinnedEditText.selectionStart)
                        }
                    }
            }
        }
        if (wasSearchExpanded) {
            searchMenuItem?.expandActionView()
            searchView?.setQuery(savedSearchQuery, false)
        }
        searchMenuItem?.setOnActionExpandListener(object : MenuItem.OnActionExpandListener {
            override fun onMenuItemActionExpand(item: MenuItem): Boolean {
                searchView?.requestFocus()
                return true
            }
            override fun onMenuItemActionCollapse(item: MenuItem): Boolean {
                binding.pinnedEditText.clearSearchHighlights()
                return true
            }
        })
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        when (item.itemId) {
            R.id.action_library -> {
                showSavedSelections()
                return true
            }
            R.id.action_toggle_theme -> {
                toggleTheme()
                return true
            }
        }
        return super.onOptionsItemSelected(item)
    }

    private fun setupToolbar() {
        setSupportActionBar(binding.toolbar)
        supportActionBar?.setDisplayShowTitleEnabled(false)
        binding.toolbar.findViewById<TextView>(R.id.toolbarTitle).apply {
            text = getString(R.string.app_name)
            setOnClickListener { showAboutDialog() }
        }
    }

    private fun setupTextArea() {
        if (binding.pinnedEditText.text.isNullOrEmpty())
            binding.pinnedEditText.setText("")
    }

    private fun setupSaveButton() {
        // Use safe calls so that if saveFab is absent (e.g. in landscape) it won’t crash.
        binding.saveFab?.visibility = View.GONE
        binding.saveFab?.setOnClickListener {
            animateSaveButton { showSaveBottomSheet() }
        }
    }

    private fun animateSaveButton(onAnimationEnd: () -> Unit) {
        binding.saveFab?.animate()?.apply {
            scaleX(0.8f).scaleY(0.8f).setDuration(100)
            withEndAction {
                binding.saveFab?.animate()?.scaleX(1f)?.scaleY(1f)?.setDuration(100)
                    ?.withEndAction(onAnimationEnd)
                    ?.start()
            }
            start()
        }
    }

    private fun setupSearchNavigation() {
        binding.searchNavigation.findViewById<ImageButton>(R.id.btnPrev).setOnClickListener {
            binding.pinnedEditText.previousSearchResult()
            // Wait a moment for the selection to update, then center the result:
            binding.pinnedEditText.post {
                centerSearchResult()
                updateSearchNavigation()
            }
        }
        binding.searchNavigation.findViewById<ImageButton>(R.id.btnNext).setOnClickListener {
            binding.pinnedEditText.nextSearchResult()
            binding.pinnedEditText.post {
                centerSearchResult()
                updateSearchNavigation()
            }
        }
    }

    private fun updateSearchNavigation(clear: Boolean = false) {
        val count = binding.pinnedEditText.getSearchResultsCount?.invoke() ?: 0
        if (count > 0) {
            binding.searchNavigation.visibility = View.VISIBLE
            val current = binding.pinnedEditText.getCurrentSearchIndex?.invoke() ?: 0
            binding.txtSearchCount?.text = "$current / $count"
        } else {
            binding.searchNavigation.visibility = View.GONE
            binding.txtSearchCount?.text = ""
        }
    }

    private fun showSaveBottomSheet() {
        val selectionText = binding.pinnedEditText.text?.substring(
            binding.pinnedEditText.selectionStart,
            binding.pinnedEditText.selectionEnd
        ) ?: return

        val bottomSheetDialog = BottomSheetDialog(this)
        val sheetView = layoutInflater.inflate(R.layout.bottom_sheet_save, null)
        bottomSheetDialog.setContentView(sheetView)

        val nameInput = sheetView.findViewById<com.google.android.material.textfield.TextInputEditText>(R.id.nameInput)
        val previewText = sheetView.findViewById<TextView>(R.id.previewText)
        val saveButton = sheetView.findViewById<TextView>(R.id.saveButton)
        val cancelButton = sheetView.findViewById<TextView>(R.id.cancelButton)

        val defaultName = selectionText.take(50).replace("\n", " ").split(" ").take(5).joinToString(" ")
        nameInput.setText(defaultName)
        previewText.text = selectionText

        saveButton.setOnClickListener {
            val name = nameInput.text.toString().ifBlank { defaultName }
            val selection = SavedSelection(name = name, text = selectionText)
            viewModel.saveSelection(selection)
            bottomSheetDialog.dismiss()
            showSnackbar(getString(R.string.selection_saved))
        }
        cancelButton.setOnClickListener { bottomSheetDialog.dismiss() }
        bottomSheetDialog.show()
    }

    private fun showSavedSelections() {
        val selections = viewModel.savedSelections.value
        if (selections.isNullOrEmpty()) {
            showSnackbar(getString(R.string.no_selections))
            return
        }
        val dialogView = layoutInflater.inflate(R.layout.dialog_saved_selections, null)
        val recyclerView = dialogView.findViewById<androidx.recyclerview.widget.RecyclerView>(R.id.savedSelectionsRecyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        val alertDialog = MaterialAlertDialogBuilder(this)
            .setView(dialogView)
            .create()

        val adapter = SavedSelectionsAdapter(selections,
            onItemClick = { selection ->
                binding.pinnedEditText.clearSelectionPins()
                binding.pinnedEditText.clearSearchHighlights()
                binding.pinnedEditText.setText(selection.text)
                alertDialog.dismiss()
            },
            onDeleteClick = { selection -> showDeleteConfirmation(selection) },
            onEditClick = { selection -> showEditDialog(selection) }
        )
        recyclerView.adapter = adapter
        alertDialog.show()
    }

    private fun showDeleteConfirmation(selection: SavedSelection) {
        MaterialAlertDialogBuilder(this)
            .setTitle(getString(R.string.delete_selection))
            .setMessage(getString(R.string.delete_confirmation, selection.name))
            .setPositiveButton(getString(R.string.delete)) { dialog, which ->
                viewModel.deleteSelection(selection)
                showSnackbar(getString(R.string.selection_deleted))
            }
            .setNegativeButton(getString(R.string.cancel), null)
            .show()
    }

    private fun showEditDialog(selection: SavedSelection) {
        val dialogView: View = layoutInflater.inflate(R.layout.dialog_edit_selection, null)
        val nameInput = dialogView.findViewById<android.widget.EditText>(R.id.nameInput)
        nameInput.setText(selection.name)
        MaterialAlertDialogBuilder(this)
            .setTitle(getString(R.string.edit_selection))
            .setView(dialogView)
            .setPositiveButton(getString(R.string.save)) { dialog: DialogInterface, which: Int ->
                val updatedSelection = selection.copy(
                    name = nameInput.text.toString().ifBlank { selection.name }
                )
                viewModel.updateSelection(updatedSelection)
                showSnackbar(getString(R.string.selection_updated))
            }
            .setNegativeButton(getString(R.string.cancel), null)
            .show()
    }

    private fun toggleTheme() {
        val prefs = getSharedPreferences("TextSelectorPrefs", Context.MODE_PRIVATE)
        val isDarkMode = prefs.getBoolean("isDarkMode", false)
        prefs.edit().putBoolean("isDarkMode", !isDarkMode).apply()
        AppCompatDelegate.setDefaultNightMode(
            if (!isDarkMode) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
        )
        recreate()
    }

    private fun updatePinBanner() {
        binding.bottomBanner.visibility =
            if (binding.pinnedEditText.selectionStart != binding.pinnedEditText.selectionEnd)
                View.VISIBLE else View.GONE
    }

    private fun showSnackbar(message: String) {
        Snackbar.make(binding.root, message, Snackbar.LENGTH_SHORT).show()
    }

    private fun showAboutDialog() {
        val aboutHtml = """
        <h1>textSelector</h1>        
        <h3>About This App</h3>
        <p>This app was created to bring desktop-like text selection functionality to Android. 
        Having missed the convenience of shift-selection from desktop computers, I developed 
        this solution using double-tap selection and search capabilities to make text selection 
        easier and more precise on mobile devices.</p>
        
        <h3>Features</h3>
        <ul>
            <li>Double-tap text selection</li>
            <li>Quick search functionality</li>
            <li>Tripple-tap to dismiss selection</li>
            <li>Precise start and end point selection</li>
        </ul>
        
        <h3>Version</h3>
        <p>1.0.0</p>
        
        <h3>Contact & Links</h3>
        <p>Developer: Tobias Fankhauser</p>
        <p>Visit my <a href="https://github.com/fankto">GitHub</a> for source code and updates.</p>
        <p>Connect with me on <a href="https://www.linkedin.com/in/tobias-fankhauser">LinkedIn</a>.</p>
        
        <h3>Feedback</h3>
        <p>Found a bug or have a suggestion? Please report it on GitHub or contact me through LinkedIn.</p>
        
        <p>Thank you for using textSelector!</p>
    """.trimIndent()

        val dialog = MaterialAlertDialogBuilder(this)
            .setTitle(getString(R.string.about))
            .setMessage(Html.fromHtml(aboutHtml, Html.FROM_HTML_MODE_LEGACY))
            .setPositiveButton(getString(R.string.ok), null)
            .create()

        // Enable link clicking
        dialog.show()
        dialog.findViewById<TextView>(android.R.id.message)?.apply {
            movementMethod = LinkMovementMethod.getInstance()
            // Improve text appearance
            textSize = 14f
            setLineSpacing(0f, 1.2f)  // Add some line spacing for better readability
        }
    }
}




# java/com/example/textselector/data/TextSelectorRepository.kt
package com.example.textselector.data

class TextSelectorRepository(private val dao: SavedSelectionDao) {
    suspend fun getAllSelections(): List<SavedSelection> = dao.getAll()
    suspend fun insertSelection(selection: SavedSelection) = dao.insert(selection)
    suspend fun updateSelection(selection: SavedSelection) = dao.update(selection)
    suspend fun deleteSelection(selection: SavedSelection) = dao.delete(selection)
}




# java/com/example/textselector/data/TextSelectorDatabase.kt
package com.example.textselector.data

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase

@Database(entities = [SavedSelection::class], version = 1, exportSchema = false)
abstract class TextSelectorDatabase : RoomDatabase() {
    abstract fun savedSelectionDao(): SavedSelectionDao

    companion object {
        @Volatile private var INSTANCE: TextSelectorDatabase? = null

        fun getInstance(context: Context): TextSelectorDatabase =
            INSTANCE ?: synchronized(this) {
                INSTANCE ?: Room.databaseBuilder(
                    context.applicationContext,
                    TextSelectorDatabase::class.java,
                    "text_selector_database"
                )
                    .fallbackToDestructiveMigration()
                    .build().also { INSTANCE = it }
            }
    }
}




# java/com/example/textselector/data/SavedSelection.kt
package com.example.textselector.data

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "saved_selection")
data class SavedSelection(
    @PrimaryKey val id: Long = System.currentTimeMillis(),
    val name: String,
    val text: String,
    val timestamp: Long = System.currentTimeMillis()
) {
    fun getPreviewText(maxChars: Int = 150): String {
        val preview = text.take(maxChars)
        return if (text.length > maxChars) "$preview..." else preview
    }
}




# java/com/example/textselector/data/SavedSelectionDao.kt
package com.example.textselector.data

import androidx.room.*

@Dao
interface SavedSelectionDao {
    @Query("SELECT * FROM saved_selection ORDER BY timestamp DESC")
    suspend fun getAll(): List<SavedSelection>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insert(selection: SavedSelection)

    @Update
    suspend fun update(selection: SavedSelection)

    @Delete
    suspend fun delete(selection: SavedSelection)
}




# res/values/styles.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Text Appearances -->
    <style name="TextAppearance.MetallicGold.Title" parent="TextAppearance.MaterialComponents.Headline6">
        <item name="android:textColor">@color/gold_primary</item>
        <item name="android:textSize">24sp</item>
        <item name="android:fontFamily">sans-serif-medium</item>
        <item name="android:letterSpacing">0.0125</item>
    </style>

    <style name="TextAppearance.MetallicGold.Subtitle" parent="TextAppearance.MaterialComponents.Subtitle1">
        <item name="android:textColor">@color/gold_primary</item>
        <item name="android:textSize">18sp</item>
        <item name="android:fontFamily">sans-serif-medium</item>
        <item name="android:letterSpacing">0.00625</item>
    </style>

    <!-- Button Styles -->
    <style name="Widget.TextSelector.Button.MetallicGold" parent="Widget.MaterialComponents.Button">
        <item name="backgroundTint">@color/gold_primary</item>
        <item name="rippleColor">@color/gold_shine</item>
        <item name="android:textColor">?attr/colorOnPrimary</item>
        <item name="android:letterSpacing">0.0125</item>
        <item name="cornerRadius">24dp</item>
        <item name="elevation">4dp</item>
    </style>

    <style name="Widget.TextSelector.Button.IconOnly.RoseGold" parent="Widget.MaterialComponents.Button.OutlinedButton">
        <item name="iconTint">@color/rose_gold_primary</item>
        <item name="strokeColor">@color/rose_gold_primary</item>
        <item name="rippleColor">@color/rose_gold_light</item>
        <item name="cornerRadius">24dp</item>
        <item name="android:insetLeft">0dp</item>
        <item name="android:insetTop">0dp</item>
        <item name="android:insetRight">0dp</item>
        <item name="android:insetBottom">0dp</item>
        <item name="android:padding">12dp</item>
    </style>

    <style name="Widget.TextSelector.Button.IconOnly.WhiteGold" parent="Widget.MaterialComponents.Button.OutlinedButton">
        <item name="iconTint">@color/white_gold_primary</item>
        <item name="strokeColor">@color/white_gold_primary</item>
        <item name="rippleColor">@color/white_gold_light</item>
        <item name="cornerRadius">24dp</item>
        <item name="android:insetLeft">0dp</item>
        <item name="android:insetTop">0dp</item>
        <item name="android:insetRight">0dp</item>
        <item name="android:insetBottom">0dp</item>
        <item name="android:padding">12dp</item>
    </style>

    <style name="Widget.TextSelector.Button.TextButton" parent="Widget.MaterialComponents.Button.TextButton">
        <item name="android:textColor">?android:textColorPrimary</item>
        <item name="rippleColor">?android:textColorSecondary</item>
    </style>

    <!-- FAB Style -->
    <style name="Widget.TextSelector.FloatingActionButton" parent="Widget.MaterialComponents.FloatingActionButton">
        <item name="backgroundTint">@color/gold_primary</item>
        <item name="tint">?attr/colorOnPrimary</item>
        <item name="rippleColor">@color/gold_shine</item>
        <item name="elevation">6dp</item>
    </style>

    <!-- Card Style -->
    <style name="Widget.TextSelector.Card" parent="Widget.MaterialComponents.CardView">
        <item name="cardElevation">2dp</item>
        <item name="cardCornerRadius">12dp</item>
        <item name="strokeColor">@color/gold_primary</item>
        <item name="strokeWidth">1dp</item>
    </style>
</resources>



# res/values/colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Metallic Gold Palette -->
    <color name="gold_highlight">#E2D6A4</color>
    <color name="gold_shine">#DECB7E</color>
    <color name="gold_light">#D0BD49</color>
    <color name="gold_primary">#C09B23</color>
    <color name="gold_shadow">#B3901C</color>
    <color name="gold_dark">#A88917</color>
    <color name="gold_darkest">#9B8014</color>

    <!-- Rose Gold (for delete) -->
    <color name="rose_gold_highlight">#E6C5C5</color>
    <color name="rose_gold_shine">#D4A5A5</color>
    <color name="rose_gold_light">#C28585</color>
    <color name="rose_gold_primary">#B06565</color>
    <color name="rose_gold_shadow">#9E4545</color>
    <color name="rose_gold_dark">#8C2525</color>

    <!-- White Gold (for edit) -->
    <color name="white_gold_highlight">#E6E8E6</color>
    <color name="white_gold_shine">#D4D8D4</color>
    <color name="white_gold_light">#C2C8C2</color>
    <color name="white_gold_primary">#B0B8B0</color>
    <color name="white_gold_shadow">#9EA89E</color>
    <color name="white_gold_dark">#8C988C</color>

    <!-- Light Theme Colors -->
    <color name="light_background">#D7D7D7</color>
    <color name="light_surface">#F0F0F0</color>
    <color name="light_text_primary">#141414</color>
    <color name="light_text_secondary">#2D2D2D</color>
    <color name="light_text_tertiary">#4B4B4B</color>

    <!-- Dark Theme Colors -->
    <color name="dark_background">#282828</color>
    <color name="dark_surface">#0F0F0F</color>
    <color name="dark_text_primary">#EBEBEB</color>
    <color name="dark_text_secondary">#D2D2D2</color>
    <color name="dark_text_tertiary">#B4B4B4</color>

    <!-- Search Highlight previously FFD700 -->
    <color name="searchHighlight">#66FFD700</color>
</resources>



# res/values/themes.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Base application theme -->
    <style name="Theme.TextSelector" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Primary brand color -->
        <item name="colorPrimary">@color/gold_primary</item>
        <item name="colorPrimaryVariant">@color/gold_dark</item>
        <item name="colorOnPrimary">@color/light_text_primary</item>

        <!-- Secondary brand color -->
        <item name="colorSecondary">@color/gold_light</item>
        <item name="colorSecondaryVariant">@color/gold_shine</item>
        <item name="colorOnSecondary">@color/light_text_primary</item>

        <!-- Status bar and navigation -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">true</item>

        <!-- Background colors -->
        <item name="android:windowBackground">@color/light_background</item>
        <item name="colorSurface">@color/light_surface</item>
        <item name="colorOnSurface">@color/light_text_primary</item>

        <!-- Text colors -->
        <item name="android:textColorPrimary">@color/light_text_primary</item>
        <item name="android:textColorSecondary">@color/light_text_secondary</item>
        <item name="android:textColorTertiary">@color/light_text_tertiary</item>

        <!-- Custom attributes -->
        <item name="metallic_gold_gradient">@drawable/gradient_metallic_gold</item>
        <item name="metallic_rose_gold_gradient">@drawable/gradient_rose_gold</item>
        <item name="metallic_white_gold_gradient">@drawable/gradient_white_gold</item>

        <!-- Text selection handle -->
        <item name="android:textSelectHandle">@drawable/selection_handle</item>
        <item name="android:textSelectHandleLeft">@drawable/selection_handle</item>
        <item name="android:textSelectHandleRight">@drawable/selection_handle</item>

        <!-- Theme toggle icon -->
        <item name="toggleOuterColor">@android:color/black</item>
        <item name="toggleInnerColor">@color/gold_primary</item>

        <!-- Icon color -->
        <item name="iconColor">@color/gold_primary</item>
    </style>

    <!-- Dark theme -->
    <style name="Theme.TextSelector.Dark" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Colors remain same as light theme -->
        <item name="colorPrimary">@color/gold_primary</item>
        <item name="colorPrimaryVariant">@color/gold_dark</item>
        <item name="colorOnPrimary">@color/dark_text_primary</item>

        <!-- Background colors -->
        <item name="android:windowBackground">@color/dark_background</item>
        <item name="colorSurface">@color/dark_surface</item>
        <item name="colorOnSurface">@color/dark_text_primary</item>

        <!-- Text colors -->
        <item name="android:textColorPrimary">@color/dark_text_primary</item>
        <item name="android:textColorSecondary">@color/dark_text_secondary</item>
        <item name="android:textColorTertiary">@color/dark_text_tertiary</item>

        <!-- Status bar and navigation -->
        <item name="android:windowLightStatusBar">false</item>

        <!-- Theme toggle icon -->
        <item name="toggleOuterColor">@android:color/white</item>
        <item name="toggleInnerColor">@color/gold_primary</item>

        <!-- Icon color -->
        <item name="iconColor">@color/gold_primary</item>
    </style>
</resources>



# res/values/attrs.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <declare-styleable name="TextSelector">
        <!-- Custom gradient drawables -->
        <attr name="metallic_gold_gradient" format="reference" />
        <attr name="metallic_rose_gold_gradient" format="reference" />
        <attr name="metallic_white_gold_gradient" format="reference" />
    </declare-styleable>
    <attr name="toggleOuterColor" format="color"/>
    <attr name="toggleInnerColor" format="color"/>
    <attr name="iconColor" format="color"/>
</resources>



# res/values/strings.xml
<resources>
    <string name="app_name">textSelector</string>
    <string name="pin_start">Pin Start</string>
    <string name="pin_end">Pin End</string>
    <string name="load">Load</string>
    <string name="save">Save</string>
    <string name="search">Search</string>
    <string name="search_term">Search term</string>
    <string name="paste">Paste</string>
    <string name="selection_name">Selection Name</string>
    <string name="save_selection">Save Selection</string>
    <string name="preview">Preview</string>
    <string name="cancel">Cancel</string>
    <string name="library">Library</string>
    <string name="saved_selections">Saved Selections</string>
    <string name="previous_result">Previous result</string>
    <string name="next_result">Next result</string>
    <string name="pin_active">PIN ACTIVE</string>
    <string name="toggle_theme">Toggle Theme</string>
    <string name="saved_selections_header">Your Saved Text Selections</string>
    <string name="hint_paste_text">Paste your text here</string>
    <string name="empty_counter">0/0</string>
    <string name="selection_saved">Selection saved</string>
    <string name="no_selections">No selections available</string>
    <string name="delete_selection">Delete Selection</string>
    <string name="delete_confirmation">Are you sure you want to delete %1$s?</string>
    <string name="delete">Delete</string>
    <string name="selection_deleted">Selection deleted</string>
    <string name="dialog_edit_selection">Edit Selection</string>
    <string name="edit_selection">Edit Selection</string>
    <string name="selection_updated">Selection updated</string>
    <string name="about">About</string>
    <string name="ok">OK</string>
</resources>



# res/layout-land/activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <!-- AppBarLayout with proper inset handling -->
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appBar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@android:color/transparent"
        android:fitsSystemWindows="true"
        app:elevation="0dp">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:background="@android:color/transparent"
            android:paddingTop="8dp"
            app:menu="@menu/menu_main"
            app:navigationIconTint="@color/gold_primary"
            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
            app:title="">

            <TextView
                android:id="@+id/toolbarTitle"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="start"
                android:clickable="true"
                android:focusable="true"
                android:text="@string/app_name"
                android:textAppearance="@style/TextAppearance.MetallicGold.Title" />
        </com.google.android.material.appbar.MaterialToolbar>

    </com.google.android.material.appbar.AppBarLayout>

    <!-- Main text area -->
    <com.example.textselector.ui.PinnedEditText
        android:id="@+id/pinnedEditText"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:gravity="top"
        android:hint="@string/hint_paste_text"
        android:imeOptions="flagNoExtractUi"
        android:inputType="textMultiLine"
        android:padding="16dp"
        android:textSize="16sp"
        app:layout_behavior="@string/appbar_scrolling_view_behavior" />

    <!-- Search navigation controls -->
    <LinearLayout
        android:id="@+id/searchNavigation"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:background="@drawable/search_nav_background"
        android:elevation="10dp"
        android:orientation="horizontal"
        android:padding="8dp"
        android:visibility="gone">

        <ImageButton
            android:id="@+id/btnPrev"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="@string/previous_result"
            android:minWidth="48dp"
            android:minHeight="48dp"
            android:padding="8dp"
            android:src="@drawable/ic_arrow_up" />

        <TextView
            android:id="@+id/txtSearchCount"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"
            android:text="@string/empty_counter"
            android:textColor="@color/light_text_primary" />

        <ImageButton
            android:id="@+id/btnNext"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="@string/next_result"
            android:minWidth="48dp"
            android:minHeight="48dp"
            android:padding="8dp"
            android:src="@drawable/ic_arrow_down" />
    </LinearLayout>

    <!-- Bottom banner -->
    <LinearLayout
        android:id="@+id/bottomBanner"
        android:layout_width="match_parent"
        android:layout_height="48dp"
        android:layout_gravity="bottom"
        android:background="@android:color/transparent"
        android:gravity="center_vertical"
        android:orientation="horizontal"
        android:paddingHorizontal="16dp"
        android:visibility="gone">

        <TextView
            android:id="@+id/tvBannerInfo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/pin_active"
            android:textColor="@color/gold_primary"
            android:textSize="16sp" />
    </LinearLayout>

</androidx.coordinatorlayout.widget.CoordinatorLayout>




# res/layout/dialog_saved_selections.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:id="@+id/headerText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="16dp"
        android:text="Your Saved Text Selections"
        android:textAppearance="@style/TextAppearance.MetallicGold.Title"
        android:gravity="center" />

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/savedSelectionsRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:padding="8dp"
        android:clipToPadding="false"/>

</LinearLayout>



# res/layout/dialog_edit_selection.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp">

    <EditText
        android:id="@+id/nameInput"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="@string/selection_name"/>
</LinearLayout>




# res/layout/dialog_save_selection.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@android:color/transparent"
        app:elevation="0dp">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            app:title="@string/saved_selections"
            app:titleTextAppearance="@style/TextAppearance.MetallicGold.Title"
            android:background="@android:color/transparent"/>

    </com.google.android.material.appbar.AppBarLayout>

    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/savedSelectionsRecyclerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="8dp"
        android:clipToPadding="false"
        app:layout_behavior="@string/appbar_scrolling_view_behavior"/>

</androidx.coordinatorlayout.widget.CoordinatorLayout>




# res/layout/item_saved_selection.xml
<?xml version="1.0" encoding="utf-8"?>
<com.google.android.material.card.MaterialCardView
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginHorizontal="8dp"
    android:layout_marginVertical="4dp"
    app:cardElevation="2dp"
    app:strokeColor="@color/gold_primary"
    app:strokeWidth="1dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:padding="16dp">

        <RelativeLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <TextView
                android:id="@+id/selectionTitle"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_alignParentStart="true"
                android:layout_toStartOf="@id/editButton"
                android:textAppearance="@style/TextAppearance.MetallicGold.Subtitle"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/editButton"
                style="@style/Widget.TextSelector.Button.IconOnly.WhiteGold"
                android:layout_width="48dp"
                android:layout_height="48dp"
                android:layout_toStartOf="@id/deleteButton"
                app:icon="@drawable/ic_edit"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/deleteButton"
                style="@style/Widget.TextSelector.Button.IconOnly.RoseGold"
                android:layout_width="48dp"
                android:layout_height="48dp"
                android:layout_alignParentEnd="true"
                app:icon="@drawable/ic_delete"/>

        </RelativeLayout>

        <TextView
            android:id="@+id/timestamp"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="4dp"
            android:textAppearance="?attr/textAppearanceCaption"
            android:textColor="?android:textColorSecondary"/>

        <TextView
            android:id="@+id/previewText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="8dp"
            android:ellipsize="end"
            android:maxLines="3"
            android:textAppearance="?attr/textAppearanceBody2"/>

    </LinearLayout>
</com.google.android.material.card.MaterialCardView>




# res/layout/popup_pin_options.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    style="?android:attr/buttonBarStyle"
    android:orientation="horizontal"
    android:padding="8dp"
    android:background="@android:color/white"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content">

    <Button
        android:id="@+id/buttonOption1"
        style="?android:attr/buttonBarButtonStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="" />

    <Button
        android:id="@+id/buttonOption2"
        style="?android:attr/buttonBarButtonStyle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text=""
        android:layout_marginStart="8dp"/>
</LinearLayout>




# res/layout/pin_marker.xml
<?xml version="1.0" encoding="utf-8"?>
<View
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="2dp"
    android:layout_height="match_parent"
    android:background="@drawable/gradient_metallic_gold"/>



# res/layout/activity_main.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true">

    <com.google.android.material.appbar.AppBarLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@android:color/transparent"
        app:elevation="0dp">

        <com.google.android.material.appbar.MaterialToolbar
            android:id="@+id/toolbar"
            android:layout_width="match_parent"
            android:layout_height="?attr/actionBarSize"
            android:layout_marginTop="24dp"
            android:background="@android:color/transparent"
            app:menu="@menu/menu_main"
            app:title="">

            <TextView
                android:id="@+id/toolbarTitle"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_gravity="start"
                android:clickable="true"
                android:focusable="true"
                android:text="@string/app_name"
                android:textAppearance="@style/TextAppearance.MetallicGold.Title" />
        </com.google.android.material.appbar.MaterialToolbar>

    </com.google.android.material.appbar.AppBarLayout>

    <!-- The main text area with extract mode disabled -->
    <androidx.core.widget.NestedScrollView
        android:id="@+id/nestedScrollView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <com.example.textselector.ui.PinnedEditText
            android:id="@+id/pinnedEditText"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:gravity="top"
            android:hint="@string/hint_paste_text"
            android:imeOptions="actionSearch|flagNoExtractUi"
            android:inputType="textMultiLine"
            android:padding="16dp"
            android:textSize="16sp"
            app:layout_behavior="@string/appbar_scrolling_view_behavior" />
    </androidx.core.widget.NestedScrollView>

    <!-- Use the standard Material FAB instead of a custom one -->
    <com.google.android.material.floatingactionbutton.FloatingActionButton
        android:id="@+id/saveFab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:layout_marginEnd="16dp"
        android:layout_marginBottom="70dp"
        android:contentDescription="@string/save"
        android:src="@drawable/ic_save"
        app:backgroundTint="@color/gold_primary"
        app:tint="?attr/colorOnPrimary" />

    <LinearLayout
        android:id="@+id/searchNavigation"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="bottom|end"
        android:background="@drawable/search_nav_background"
        android:elevation="10dp"
        android:orientation="horizontal"
        android:padding="8dp"
        android:visibility="gone">

        <ImageButton
            android:id="@+id/btnPrev"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="@string/previous_result"
            android:minWidth="48dp"
            android:minHeight="48dp"
            android:padding="8dp"
            android:src="@drawable/ic_arrow_up" />

        <TextView
            android:id="@+id/txtSearchCount"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"
            android:text="@string/empty_counter"
            android:textColor="@color/gold_primary" />

        <ImageButton
            android:id="@+id/btnNext"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="?attr/selectableItemBackgroundBorderless"
            android:contentDescription="@string/next_result"
            android:minWidth="48dp"
            android:minHeight="48dp"
            android:padding="8dp"
            android:src="@drawable/ic_arrow_down" />
    </LinearLayout>

    <LinearLayout
        android:id="@+id/bottomBanner"
        android:layout_width="match_parent"
        android:layout_height="96dp"
        android:layout_gravity="bottom"
        android:background="@android:color/transparent"
        android:gravity="center_vertical"
        android:orientation="horizontal"
        android:paddingHorizontal="16dp"
        android:visibility="gone">

        <TextView
            android:id="@+id/tvBannerInfo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginBottom="24dp"
            android:text="@string/pin_active"
            android:textColor="@color/gold_primary"
            android:textSize="16sp" />
    </LinearLayout>

</androidx.coordinatorlayout.widget.CoordinatorLayout>




# res/layout/bottom_sheet_save.xml
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/save_selection"
        android:textAppearance="@style/TextAppearance.MetallicGold.Title"
        android:layout_marginBottom="16dp"/>

    <com.google.android.material.textfield.TextInputLayout
        android:id="@+id/nameInputLayout"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="@string/selection_name"
        style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox">

        <com.google.android.material.textfield.TextInputEditText
            android:id="@+id/nameInput"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:inputType="text"
            android:maxLines="1"/>

    </com.google.android.material.textfield.TextInputLayout>

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/preview"
        android:textAppearance="?attr/textAppearanceSubtitle1"
        android:layout_marginTop="16dp"
        android:layout_marginBottom="8dp"/>

    <TextView
        android:id="@+id/previewText"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:maxLines="5"
        android:ellipsize="end"
        android:textAppearance="?attr/textAppearanceBody2"/>

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:layout_marginTop="16dp">

        <com.google.android.material.button.MaterialButton
            android:id="@+id/cancelButton"
            style="@style/Widget.TextSelector.Button.TextButton"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/cancel"/>

        <View
            android:layout_width="0dp"
            android:layout_height="0dp"
            android:layout_weight="1"/>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/saveButton"
            style="@style/Widget.TextSelector.Button.MetallicGold"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/save"/>

    </LinearLayout>
</LinearLayout>



# res/drawable/ic_arrow_up.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,8L6,14h12L12,8z"/>
</vector>




# res/drawable/ic_edit.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M3,17.25V21h3.75L17.81,9.94l-3.75,-3.75L3,17.25zM20.71,7.04c0.39,-0.39 0.39,-1.02 0,-1.41l-2.34,-2.34c-0.39,-0.39 -1.02,-0.39 -1.41,0l-1.83,1.83 3.75,3.75 1.83,-1.83z"/>
</vector>



# res/drawable/ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
  <group android:scaleX="0.69"
      android:scaleY="0.69"
      android:translateX="16.74"
      android:translateY="16.74">
      <path android:fillColor="#3DDC84"
            android:pathData="M0,0h108v108h-108z"/>
      <path android:fillColor="#00000000" android:pathData="M9,0L9,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,0L19,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M29,0L29,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M39,0L39,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M49,0L49,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M59,0L59,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M69,0L69,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M79,0L79,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M89,0L89,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M99,0L99,108"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,9L108,9"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,19L108,19"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,29L108,29"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,39L108,39"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,49L108,49"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,59L108,59"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,69L108,69"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,79L108,79"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,89L108,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M0,99L108,99"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,29L89,29"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,39L89,39"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,49L89,49"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,59L89,59"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,69L89,69"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M19,79L89,79"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M29,19L29,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M39,19L39,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M49,19L49,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M59,19L59,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M69,19L69,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
      <path android:fillColor="#00000000" android:pathData="M79,19L79,89"
            android:strokeColor="#33FFFFFF" android:strokeWidth="0.8"/>
  </group>
</vector>




# res/drawable/ic_save.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M17,3L5,3c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2L21,7l-4,-4zM12,19c-1.66,0 -3,-1.34 -3,-3s1.34,-3 3,-3 3,1.34 3,3 -1.34,3 -3,3zM15,9L5,9L5,5h10v4z"/>
</vector>



# res/drawable/ic_launcher_foreground.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>



# res/drawable/ic_library.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="@color/gold_primary"
        android:pathData="M4,6L2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6zM20,2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2L22,4c0,-1.1 -0.9,-2 -2,-2zM20,16L8,16L8,4h12v12zM10,9h8v2h-8zM10,12h4v2h-4zM10,6h8v2h-8z"/>
</vector>



# res/drawable/gradient_white_gold.xml
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="135"
                android:type="linear"
                android:startColor="@color/white_gold_highlight"
                android:centerColor="@color/white_gold_primary"
                android:endColor="@color/white_gold_dark"/>
        </shape>
    </item>
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="45"
                android:type="linear"
                android:startColor="#33FFFFFF"
                android:centerColor="#00FFFFFF"
                android:endColor="#00FFFFFF"/>
        </shape>
    </item>
</layer-list>



# res/drawable/search_nav_background.xml
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="#AA000000"/> <!-- semi-transparent black -->
    <corners android:radius="4dp"/>
</shape>




# res/drawable/selection_handle.xml
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="oval">
            <size android:width="24dp" android:height="24dp"/>
            <gradient
                android:type="linear"
                android:angle="135"
                android:startColor="@color/gold_highlight"
                android:centerColor="@color/gold_primary"
                android:endColor="@color/gold_dark"/>
        </shape>
    </item>
</layer-list>



# res/drawable/gradient_metallic_gold.xml
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="135"
                android:type="linear"
                android:startColor="@color/gold_highlight"
                android:centerColor="@color/gold_primary"
                android:endColor="@color/gold_dark"/>
        </shape>
    </item>
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="45"
                android:type="linear"
                android:startColor="#33FFFFFF"
                android:centerColor="#00FFFFFF"
                android:endColor="#00FFFFFF"/>
        </shape>
    </item>
</layer-list>



# res/drawable/ic_delete.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/>
</vector>



# res/drawable/gradient_rose_gold.xml
<?xml version="1.0" encoding="utf-8"?>
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="135"
                android:type="linear"
                android:startColor="@color/rose_gold_highlight"
                android:centerColor="@color/rose_gold_primary"
                android:endColor="@color/rose_gold_dark"/>
        </shape>
    </item>
    <item>
        <shape android:shape="rectangle">
            <gradient
                android:angle="45"
                android:type="linear"
                android:startColor="#33FFFFFF"
                android:centerColor="#00FFFFFF"
                android:endColor="#00FFFFFF"/>
        </shape>
    </item>
</layer-list>



# res/drawable/ic_toggle_theme.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <!-- Outer circle -->
    <path
        android:fillColor="?attr/toggleOuterColor"
        android:pathData="M12,2a10,10 0 1,0 10,10A10,10 0 0,0 12,2z"/>
    <!-- Inner crescent -->
    <path
        android:fillColor="?attr/toggleInnerColor"
        android:pathData="M12,4a8,8 0 0,0 0,16c4.42,0 8,-3.58 8,-8 0,-1.67 -0.52,-3.21 -1.4,-4.5A6.997,6.997 0 0,1 12,4z"/>
</vector>




# res/drawable/ic_search.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="?attr/iconColor"
        android:pathData="M15.5,14h-0.79l-0.28,-0.27A6.471,6.471 0,0,0,16,9.5 6.5,6.5 0,1,0,9.5,16a6.471,6.471 0,0,0,4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zm-6,0C8.01,14,6,11.99,6,9.5 6,7.01,8.01,5,10.5,5 12.99,5,15,7.01,15,9.5 15,11.99,12.99,14,10.5,14z"/>
</vector>




# res/drawable/ic_arrow_down.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp" android:height="24dp"
    android:viewportWidth="24" android:viewportHeight="24">
    <path
        android:fillColor="@android:color/white"
        android:pathData="M12,16l6,-6H6l6,6z"/>
</vector>




# res/values-night/themes.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Dark theme -->
    <style name="Theme.TextSelector" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <!-- Colors remain same as light theme for consistency -->
        <item name="colorPrimary">@color/gold_primary</item>
        <item name="colorPrimaryVariant">@color/gold_dark</item>
        <item name="colorOnPrimary">@color/dark_text_primary</item>

        <!-- Secondary brand color -->
        <item name="colorSecondary">@color/gold_light</item>
        <item name="colorSecondaryVariant">@color/gold_shine</item>
        <item name="colorOnSecondary">@color/dark_text_primary</item>

        <!-- Background colors -->
        <item name="android:windowBackground">@color/dark_background</item>
        <item name="colorSurface">@color/dark_surface</item>
        <item name="colorOnSurface">@color/dark_text_primary</item>

        <!-- Text colors -->
        <item name="android:textColorPrimary">@color/dark_text_primary</item>
        <item name="android:textColorSecondary">@color/dark_text_secondary</item>
        <item name="android:textColorTertiary">@color/dark_text_tertiary</item>

        <!-- Status bar and navigation -->
        <item name="android:statusBarColor">@android:color/transparent</item>
        <item name="android:navigationBarColor">@android:color/transparent</item>
        <item name="android:windowLightStatusBar">false</item>

        <!-- Custom attributes -->
        <item name="metallic_gold_gradient">@drawable/gradient_metallic_gold</item>
        <item name="metallic_rose_gold_gradient">@drawable/gradient_rose_gold</item>
        <item name="metallic_white_gold_gradient">@drawable/gradient_white_gold</item>

        <!-- Theme toggle icon -->
        <item name="toggleOuterColor">@android:color/white</item>
        <item name="toggleInnerColor">@color/gold_primary</item>

        <!-- Icon color -->
        <item name="iconColor">@color/gold_primary</item>
    </style>
</resources>



# res/menu/custom_selection_menu.xml
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_pin_start"
        android:title="@string/pin_start"
        app:showAsAction="ifRoom" />
    <item
        android:id="@+id/action_pin_end"
        android:title="@string/pin_end"
        app:showAsAction="ifRoom" />
</menu>




# res/menu/menu_main.xml
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto">
    <item
        android:id="@+id/action_search"
        android:icon="@drawable/ic_search"
        android:title="@string/search"
        app:showAsAction="ifRoom|collapseActionView"
        app:actionViewClass="androidx.appcompat.widget.SearchView" />
    <item
        android:id="@+id/action_library"
        android:icon="@drawable/ic_library"
        android:title="@string/library"
        app:showAsAction="always" />
    <item
        android:id="@+id/action_toggle_theme"
        android:icon="@drawable/ic_toggle_theme"
        android:title="@string/toggle_theme"
        app:showAsAction="ifRoom" />
</menu>




